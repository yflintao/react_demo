{"version":3,"file":"static/js/592.9ea28b2b.chunk.js","mappings":"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","sources":["pages/Article/index.js","store/login.Store.js","store/user.Store.js","store/channel.Store.js","store/index.js"],"sourcesContent":["import './index.scss'\nimport {Link, useNavigate} from 'react-router-dom'\nimport {observer} from 'mobx-react-lite'\nimport {Table, Tag, Space, Card, Breadcrumb, Form, Button, Radio, DatePicker, Select} from 'antd'\nimport 'moment/locale/zh-cn'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\nimport {EditOutlined, DeleteOutlined} from '@ant-design/icons'\nimport {useEffect, useState} from 'react'\nimport {http} from '@/utils'\nimport {useStore} from '@/store'\n\nconst {Option} = Select\nconst {RangePicker} = DatePicker\n\n\nconst Article = () => {\n    const {channelStore} = useStore()\n\n    // 文章列表管理 统一管理数据 将来修改给setArticleData传对象\n    const [articleData, setArticleData] = useState({\n        list: [],// 文章列表\n        count: 0 // 文章数量\n    })\n\n    // 文章参数管理\n    const [params, setParams] = useState({\n        page: 1,\n        size: 10,\n        keywords:''\n    })\n    // 获取文章列表\n    useEffect(() => {\n        const loadList = async () => {\n            const recode = await http.get('/article/search', {params});\n            const {count, rows} = recode.data\n            setArticleData({\n                list: rows,\n                count\n            })\n        }\n        loadList()\n    }, [params])\n\n    /* 表单筛选功能实现 */\n    const onFinish = (values) => {\n        const {channel_id, date, status} = values\n        // 数据处理\n        const _params = {}\n        // 格式化status\n        _params.status = status\n\n        // 初始化频道\n        if (channel_id) {\n            _params.channel_id = channel_id\n        }\n        // 初始化时间\n        if (date) {\n            _params.begin_pubdate = date[0].format('YYYY-MM-DD')\n            _params.end_pubdate = date[1].format('YYYY-MM-DD')\n        }\n        // 修改params数据 引起接口的重新发送 对象的合并是一个整体覆盖 改了对象的整体引用\n        setParams({\n            ...params,\n            ..._params\n        })\n    }\n    // 翻页实现\n    const pageChange = (page) => {\n        setParams({\n            ...params,\n            page\n        })\n    }\n\n    const formatStatus = (type) => {\n        const TYPES = {\n            1: <Tag color=\"red\">审核成功</Tag>,\n            2: <Tag color=\"green\">审核失败</Tag>\n        }\n        return TYPES[type]\n    }\n\n    // 删除文章\n    const delArticle = async (data) => {\n        await http.get(`/mp/articles/${data.id}`)\n        // 刷新一下列表\n        setParams({\n            ...params,\n            page: 1\n        })\n    }\n\n    // 编辑文章\n    const navigate = useNavigate()\n    const goPublish = (data) => {\n        navigate(`/publish?id=${data.id}`)\n    }\n\n    const columns = [\n        {\n            title: '标题',\n            dataIndex: 'title',\n            width: 220\n        },\n        {\n            title: '栏目',\n            dataIndex: 'categoryRows',\n            width: 220,\n            render: (rows) => {\n                return rows && rows['category_name'];\n            }\n        },\n        {\n            title: '状态',\n            dataIndex: 'type',\n            render: data => formatStatus(data)\n        },\n        {\n            title: '发布时间',\n            dataIndex: 'creat_time'\n        },\n        {\n            title: '操作',\n            render: data => {\n                return (\n                    <Space size=\"middle\">\n                        <Button\n                            type=\"primary\"\n                            shape=\"circle\"\n                            icon={<EditOutlined/>}\n                            onClick={() => goPublish(data)}/>\n                        <Button\n                            type=\"primary\"\n                            danger\n                            shape=\"circle\"\n                            icon={<DeleteOutlined/>}\n                            onClick={() => delArticle(data)}\n                        />\n                    </Space>\n                )\n            },\n            fixed: 'right'\n        }\n    ]\n\n    return (\n        <div>\n            {/* 筛选区域 */}\n            <Card\n                title={\n                    <Breadcrumb separator=\">\">\n                        <Breadcrumb.Item>\n                            <Link to=\"/home\">首页</Link>\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item>内容管理</Breadcrumb.Item>\n                    </Breadcrumb>\n                }\n                style={{marginBottom: 20}}\n            >\n                <Form\n                    onFinish={onFinish}\n                    initialValues={{status: null}}>\n                    <Form.Item label=\"状态\" name=\"status\">\n                        <Radio.Group>\n                            <Radio value={null}>全部</Radio>\n                            <Radio value={0}>草稿</Radio>\n                            <Radio value={1}>待审核</Radio>\n                            <Radio value={2}>审核通过</Radio>\n                            <Radio value={3}>审核失败</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n\n                    <Form.Item label=\"频道\" name=\"channel_id\">\n                        <Select placeholder=\"请选择文章频道\" style={{width: 265}}>\n                            {\n                                channelStore.channelList.map(item =>\n                                    <Option key={item.id} value={item.id}>{item.category_name}</Option>\n                                )\n                            }\n                        </Select>\n                    </Form.Item>\n\n                    <Form.Item label=\"日期\" name=\"date\">\n                        {/* 传入locale属性 控制中文显示*/}\n                        <RangePicker locale={locale}></RangePicker>\n                    </Form.Item>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{marginLeft: 80}}>\n                            筛选\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Card>\n            {/* 文章列表区域 */}\n            <Card title={`根据筛选条件共查询到 ${articleData.count} 条结果：`}>\n                <Table\n                    rowKey=\"id\"\n                    columns={columns}\n                    dataSource={articleData.list}\n                    pagination={\n                        {\n                            pageSize: params.size,\n                            total: articleData.count,\n                            onChange: pageChange,\n                            current: params.page\n                        }\n                    }\n                    bordered\n                />\n            </Card>\n        </div>\n    )\n}\n\nexport default observer(Article)","// login module\nimport {makeAutoObservable} from 'mobx'\nimport {http, setToken, getToken, removeToken} from '@/utils'\n\nclass LoginStore {\n    token = getToken() || ''\n\n    constructor() {\n        // 响应式\n        makeAutoObservable(this)\n    }\n\n    getToken = async ({user_name, user_password, validateCode}) => {\n        // 调用登录接口\n        const res = await http.post('/admin/login', {\n            user_name, user_password, validateCode\n        })\n        // 存入token\n        this.token = res.data.token\n        // 存入ls\n        setToken(this.token)\n    }\n    // 退出登录\n    loginOut = () => {\n        this.token = ''\n        removeToken()\n    }\n}\n\nexport default LoginStore","import {makeAutoObservable} from 'mobx'\nimport {http} from '@/utils'\n\nclass UserStore {\n    userInfo = {}\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    getUserInfo = async () => {\n        // 调用接口获取数据\n        const res = await http.get('/admin/userInfo')\n        this.userInfo = res.data || {};\n    }\n}\n\nexport default UserStore","import {makeAutoObservable} from 'mobx'\nimport {http} from '@/utils'\n\nclass ChannelStore {\n    channelList = []\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    // article publish 哪里调用这个函数呢？\n    loadChannelList = async () => {\n        const {data} = await http.get('/category/index')\n        this.channelList = data || [];\n    }\n}\n\nexport default ChannelStore","// 把所有的模块做统一处理\n// 导出一个统一的方法 useStore\nimport React from \"react\"\nimport LoginStore from \"./login.Store\"\nimport UserStore from \"./user.Store\"\nimport ChannelStore from \"./channel.Store\"\n\nimport { configure } from \"mobx\"\nconfigure({\n  enforceActions: \"never\",\n})\n\n\nclass RootStore {\n  constructor() {\n    this.loginStore = new LoginStore()\n    this.userStore = new UserStore()\n    this.channelStore = new ChannelStore()\n    // ...\n  }\n}\n\n// 实例化根\n// 导出useStore context\nconst rootStore = new RootStore()\nconst context = React.createContext(rootStore)\n\nconst useStore = () => React.useContext(context)\n\nexport { useStore }"],"names":["Option","Select","RangePicker","DatePicker","observer","channelStore","useStore","useState","list","count","articleData","setArticleData","page","size","keywords","params","setParams","useEffect","loadList","http","recode","data","rows","delArticle","id","navigate","useNavigate","columns","title","dataIndex","width","render","type","color","shape","icon","EditOutlined","onClick","goPublish","danger","DeleteOutlined","fixed","separator","to","style","marginBottom","onFinish","values","channel_id","date","status","_params","begin_pubdate","format","end_pubdate","initialValues","label","name","value","placeholder","channelList","map","item","category_name","locale","htmlType","marginLeft","rowKey","dataSource","pagination","pageSize","total","onChange","current","bordered","LoginStore","token","getToken","user_name","user_password","validateCode","res","setToken","loginOut","removeToken","makeAutoObservable","this","UserStore","userInfo","getUserInfo","ChannelStore","loadChannelList","configure","enforceActions","rootStore","RootStore","loginStore","userStore","context","React"],"sourceRoot":""}